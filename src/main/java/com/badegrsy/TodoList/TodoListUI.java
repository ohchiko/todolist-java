/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.badegrsy.TodoList;

import java.util.Vector;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import org.json.JSONArray;
import org.json.JSONObject;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpMethod;
import org.springframework.web.client.RestTemplate;

/**
 *
 * @author gregorio
 */
public class TodoListUI extends javax.swing.JFrame {

    private static final String REQUEST_URL = "http://localhost:8080/tasks/";
    private final HttpHeaders headers = new HttpHeaders();
    private final RestTemplate restTemplate = new RestTemplate();
    private final Vector<String> tblColumns = new Vector<>();
    private final Vector<Vector<String>> tblRows = new Vector<>();
    DefaultTableModel tblModel = new DefaultTableModel(tblRows, tblColumns);

    /**
     * Creates new form TodoListUI
     */
    public TodoListUI() {
        initComponents();
        
        tblJTable.setDefaultEditor(Object.class, null);
        tblJTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        
        tblColumns.add("ID");
        tblColumns.add("Name");
        tblColumns.add("Status");
        
        tblJTable.setModel(tblModel);
        
        fillData();
    }
    
    protected Task initTask(Vector<String> row) {
        Task task = new Task();
        task.setId(Long.parseLong(row.get(0)));
        task.setName(row.get(1));
        
        return task;
    }
    
    protected String sendRequest(HttpMethod method, HttpEntity entity, String id) {
        return restTemplate.exchange(
                REQUEST_URL+id,
                method,
                entity,
                String.class)
                .getBody();
    }
    
    protected void updateTaskStatus(boolean status) {
        int rowNum = tblJTable.getSelectedRow();
        Vector<String> row = tblRows.get(rowNum);
        
        Task task = initTask(row);
        task.setStatus(status);
        
        HttpEntity entity = new HttpEntity(task);
        String response = sendRequest(HttpMethod.PUT, entity, row.get(0));
        
        JSONObject jsonTask = new JSONObject(response);
        row.set(2, jsonTask.get("status").toString());
        
        tblRows.set(rowNum, row);
        tblModel.fireTableDataChanged();
    }
    
    protected void createRowFromJSONTask(JSONObject jsonTask) {
        Vector<String> row = new Vector<>();
        
        row.add(jsonTask.get("id").toString());
        row.add(jsonTask.get("name").toString());
        row.add(jsonTask.get("status").toString());
        
        tblRows.add(row);
    }
    
    protected void fillData() {
        // Clears the model
        tblModel.setRowCount(0);
        
        HttpEntity entity = new HttpEntity(headers);
        String response = sendRequest(HttpMethod.GET, entity, "");
        
        JSONArray resArray = new JSONObject(response)
                .getJSONObject("_embedded")
                .getJSONArray("taskList");
        
        for (int i = 0; i < resArray.length(); i++) {
            JSONObject jsonTask = resArray.optJSONObject(i);            
            createRowFromJSONTask(jsonTask);
        }
        
        tblModel.fireTableDataChanged();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        inputJPanel = new javax.swing.JPanel();
        inputJTextField = new javax.swing.JTextField();
        addJButton = new javax.swing.JButton();
        checkJButton = new javax.swing.JButton();
        uncheckJButton = new javax.swing.JButton();
        deleteJButton = new javax.swing.JButton();
        fillJButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblJTable = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("TodoList");

        inputJPanel.setName("inputJPanel"); // NOI18N

        addJButton.setText("Add");
        addJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                addJButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout inputJPanelLayout = new javax.swing.GroupLayout(inputJPanel);
        inputJPanel.setLayout(inputJPanelLayout);
        inputJPanelLayout.setHorizontalGroup(
            inputJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputJPanelLayout.createSequentialGroup()
                .addComponent(inputJTextField)
                .addGap(18, 18, 18)
                .addComponent(addJButton))
        );
        inputJPanelLayout.setVerticalGroup(
            inputJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(inputJPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(inputJPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(inputJTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addJButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        checkJButton.setText("Check");
        checkJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                checkJButtonMouseClicked(evt);
            }
        });

        uncheckJButton.setText("Uncheck");
        uncheckJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                uncheckJButtonMouseClicked(evt);
            }
        });

        deleteJButton.setText("Delete");
        deleteJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                deleteJButtonMouseClicked(evt);
            }
        });

        fillJButton.setText("Fill Data");
        fillJButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fillJButtonMouseClicked(evt);
            }
        });

        tblJTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblJTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(fillJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 121, Short.MAX_VALUE)
                        .addComponent(checkJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(uncheckJButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteJButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(inputJPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(inputJPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(checkJButton)
                    .addComponent(uncheckJButton)
                    .addComponent(deleteJButton)
                    .addComponent(fillJButton))
                .addContainerGap(103, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addJButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_addJButtonMouseClicked
        // TODO add your handling code here:
        String name = inputJTextField.getText();
        if (name.length() != 0) {
            Vector<String> row = new Vector<>();
            Task task = new Task(name);
            HttpEntity entity = new HttpEntity(task);

            String response = sendRequest(HttpMethod.POST, entity, "");

            JSONObject jsonTask = new JSONObject(response);
            createRowFromJSONTask(jsonTask);

            tblModel.fireTableDataChanged();
        }
    }//GEN-LAST:event_addJButtonMouseClicked
    
    private void fillJButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fillJButtonMouseClicked
        fillData();
    }//GEN-LAST:event_fillJButtonMouseClicked

    private void checkJButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_checkJButtonMouseClicked
        // TODO add your handling code here:
        updateTaskStatus(true);
    }//GEN-LAST:event_checkJButtonMouseClicked

    private void uncheckJButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_uncheckJButtonMouseClicked
        // TODO add your handling code here:
        updateTaskStatus(false);
    }//GEN-LAST:event_uncheckJButtonMouseClicked

    private void deleteJButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteJButtonMouseClicked
        // TODO add your handling code here:
        int rowNum = tblJTable.getSelectedRow();
        Vector<String> row = tblRows.get(rowNum);
        
        String response = sendRequest(HttpMethod.DELETE, new HttpEntity(headers), row.get(0));
        
        tblRows.remove(rowNum);
        tblModel.fireTableDataChanged();
    }//GEN-LAST:event_deleteJButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TodoListUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TodoListUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TodoListUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TodoListUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new TodoListUI().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addJButton;
    private javax.swing.JButton checkJButton;
    private javax.swing.JButton deleteJButton;
    private javax.swing.JButton fillJButton;
    private javax.swing.JPanel inputJPanel;
    private javax.swing.JTextField inputJTextField;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblJTable;
    private javax.swing.JButton uncheckJButton;
    // End of variables declaration//GEN-END:variables
}
